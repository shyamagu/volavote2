<!DOCTYPE html>
<html>
  <head prefix="og: http://ogp.me/ns#">
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
    <meta name="og:url" content="<%= fullurl %>">
    <meta name="og:title" content="<%= title %>">
    <meta name="og:image" content="<%= ogpimageurl %>">
    <meta name="og:site_name" content="volavote">
    <meta name="og:type" content="article">
    <meta name="twitter:card" content="summary" />
    <title><%= title %></title>
    <!-- <script src="https://unpkg.com/vue@next"></script> -->
    <script src="https://unpkg.com/vue@3.1.1/dist/vue.global.prod.js"></script>
    <script src="/socket.io/socket.io.js"></script>
    <link rel='stylesheet' href='/stylesheets/style.css' />
    <link rel='stylesheet' href='/stylesheets/poll.css' />
    <link rel='stylesheet' href='/stylesheets/polls/info.css' />
  </head>
  <body>
    <%- include('../partial/poll_header'); %>

    <div id="poll" class="poll_body">
      <div class="info_title">{{title}}</div>
      <div v-if="image">
        <img class="poll_image" v-bind:src="image">
      </div>
      <div v-if="displays[0]" class="info_message">{{displays[0]}}</div>
      <div v-if="displays[1]!==0" class="info_timer" :class="{alert: countSecond < 60}">{{getTimerText(countSecond)}}</div>

      <div v-if="displays[2]" class="join_user_area">
        <div class="join_user_text">{{getMessage('member') + result[0]}}</div>
        <div v-for="num of result[0]" class="info_user_block">
          <img src="/images/user.svg"/>
        </div>
      </div>

      <div v-if="errorMessage" class="error_message">{{errorMessage}}</div>
    </div>
  </body>
  <script>
    const socket = io();
    var resizeTimer;
    const mediaQuery = window.matchMedia('(max-width: 700px)')
    const Poll = {
      data(){
        return{
          locale:'en',
          title:'<%= title %>',
          vvid:'<%= vvid %>',
          image:'<%= image %>',
          number: Number('<%= number %>'),
          displays:JSON.parse('<%- JSON.stringify(displays) %>'),
          countSecond:0,
          timerOn:false,
          timerObj:null,
          parent:'<%= parent %>',
          errorMessage:"",
          emphasizedIndex:-1,
          result:[],
          voted:[],
          sizes:[100,100],
          initialSize:100,
          sizeCoE:8,
          lock:'<%= lock %>',
          message:{
            en:{
              member:"Member: ",
            },
            ja:{
              member:"参加者数 ",
            },
          }
        }
      },
      mounted() {
        const language = window.navigator.language
        if(language){
          this.locale = language.toLocaleLowerCase().split("-")[0]
        }

        this.countSecond = new Number(this.displays[1]) * 60
        this.result = [0]
        this.voted = [0]

        socket.emit('pollCountUp',this.vvid)
        socket.on('pollCountUp',(countUp)=>{
          if(countUp.VVID===this.vvid){
            this.result[0] = countUp.COUNTUP[0]
          }
        })
        socket.on('switchToUrl',(switchData)=>{
          if(switchData.from==="volavote" || switchData.from===this.parent){
            window.location.href=switchData.url
          }
        })

        this.vote()
        if(this.countSecond!==0){
          this.startCount()
        }
      },
      unmounted(){
        this.stopCount()
      },
      methods :{
        getMessage(key){
          return this.message[this.locale]? this.message[this.locale][key] : this.message['en'][key]
        },
        startCount(){
          let self = this
          this.timerObj = setInterval(function(){self.countDownSecond()},1000)
          this.timerOn = true
        },
        countDownSecond(){
          this.countSecond --

          if(this.countSecond<=0){
            this.stopCount()
            this.timerOn = false
          }
        },
        stopCount(){
          if(this.timerObj){
            clearInterval(this.timerObj)
          }
          this.timerOn = false
        },
        getTimerText(count){

          const minutes = Math.floor(count / 60)
          const seconds = count % 60
        
          return ('00' + minutes).slice(-2) + ":" + ('00' + seconds).slice(-2)
        },
        vote(){
          if(this.lock==="true"){
            this.voted = [0]
            this.errorMessage = "POLL CLOSED"
            return
          }
          this.errorMessage = ""
          this.voted[0] = 1

          const vote = {vvid:this.vvid, vote:this.voted}
          fetch("/poll/vote",{
            method:'POST',
            headers:{'Content-Type':'application/json'},
            body:JSON.stringify(vote)
          })
          .then(response=>response.json())
          .then(data=>{
            if(data.result==="OK"){
              //Nothing to do
            }
            else if(data.result==="NG"){
              this.errorMessage = data.error
            }
          })
          .catch((error)=>{
            this.errorMessage = error
          });
        },
      }
    }
    Vue.createApp(Poll).mount('#poll')
  </script>
</html>
