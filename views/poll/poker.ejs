<!DOCTYPE html>
<html>
  <head prefix="og: http://ogp.me/ns#">
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
    <meta name="og:url" content="<%= fullurl %>">
    <meta name="og:title" content="<%= title %>">
    <meta name="og:image" content="<%= ogpimageurl %>">
    <meta name="og:site_name" content="volavote">
    <meta name="og:type" content="article">
    <meta name="twitter:card" content="summary" />
    <title><%= title %></title>
    <!-- <script src="https://unpkg.com/vue@next"></script> -->
    <script src="https://unpkg.com/vue@3.1.1/dist/vue.global.prod.js"></script>
    <script src="/socket.io/socket.io.js"></script>
    <link rel='stylesheet' href='/stylesheets/style.css' />
    <link rel='stylesheet' href='/stylesheets/poll.css' />
    <link rel='stylesheet' href='/stylesheets/polls/poker.css' />
  </head>
  <body>
    <%- include('../partial/poll_header'); %>

    <div id="poll" class="poll_body">
      <div class="poll_title">{{title}}</div>
      <div v-if="errorMessage" class="error_message">{{errorMessage}}</div>      

      <div class="poker_place" v-if="!showResult">
        <div v-for="index of number" :key=index class="poker_card" 
          :class="{selected_card:voted[index-1]===1,focus_card: (emphasizedIndex===index-1)}" 
          @click="vote(index-1)"
        >
          <div class="poker_text" :class="{selected_text:voted[index-1]===1}">{{displays[index-1]}}</div>
        </div>
      </div>

      <div class="poker_result_board" v-if="showResult">
        <div class="poker_result_line" v-for="index of number" :class="{emphasized: (emphasizedIndex===index-1)}">
          <div class="poker_result_card"><div class="poker_result_text">{{displays[index-1]}}</div></div>
          <div class="poker_result_count_area"><div class="poker_result_bar" :style="`width:${bars[index-1]}%;`">{{countList[index-1]}}</div></div>
          <div class="poker_result_user_area">
            <div class="poker_vote_user" v-for="user in userList[index-1]">
              <img src="/images/user.svg">{{user}}
            </div>
          </div>
        </div>
      </div>

    </div>
  </body>
  <script>
    const socket = io();
    const mediaQuery = window.matchMedia('(max-width: 700px)')
    const Poll = {
      data(){
        return{
          title:'<%= title %>',
          vvid:'<%= vvid %>',
          parent:'<%= parent %>',
          number: Number('<%= number %>'),
          displays:JSON.parse('<%- JSON.stringify(displays) %>'),
          errorMessage:"",
          emphasizedIndex:-1,
          result:[],
          voted:[],
          lock:'<%= lock %>',
          showResult:false,
          countList:'',
          userList:'',
          bars:[],
        }
      },
      mounted() {
        this.result = new Array(this.number).fill(0)
        this.voted = new Array(this.number).fill(0)

        this.resizePoll()

        socket.emit('pollCountUp',this.vvid)
        socket.on('pollCountUp',(countUp)=>{
          if(countUp.VVID===this.vvid){

            this.result = countUp.COUNTUP

            this.resizePoll()
          }
        })
        socket.on('emphasizeVote',(emphasizeData)=>{
          if(emphasizeData.vvid===this.vvid){
            this.emphasizedIndex = emphasizeData.index
          }
        })
        socket.on('switchToUrl',(switchData)=>{
          if(switchData.from==="volavote" || switchData.from===this.parent){
            window.location.href=switchData.url
          }
        })
        socket.on('showResult',(resultData)=>{
          if(resultData.vvid===this.vvid){
            this.countList = resultData.countup.COUNTUP
            this.userList= resultData.users

            let max_count = this.countList.reduce((a,b)=>Math.max(a,b))
            if(max_count==0)max_count=1

            this.countList.forEach((element,index) => {
              this.bars[index] = 100 * element / max_count
            });

            this.showResult = true

          }
        })
      },
      methods :{
        resizePoll(){
          if (mediaQuery.matches) {
          }else{
          }
        },
        vote(index){          
          if(this.lock==="true"){
            //this.voted = new Array(this.number).fill(0)
            this.errorMessage = "POLL CLOSED"
            return
          }
          this.errorMessage = ""

          this.voted = new Array(this.number).fill(0)
          this.bars  = new Array(this.number).fill(0)
          this.voted[index] = 1

          const vote = {vvid:this.vvid, vote:this.voted}
          fetch("/poll/vote",{
            method:'POST',
            headers:{'Content-Type':'application/json'},
            body:JSON.stringify(vote)
          })
          .then(response=>response.json())
          .then(data=>{
            if(data.result==="OK"){
              //Nothing to do
            }
            else if(data.result==="NG"){
              this.errorMessage = data.error
            }
          })
          .catch((error)=>{
            this.errorMessage = error
          });
        },
      }
    }
    Vue.createApp(Poll).mount('#poll')
  </script>
</html>
